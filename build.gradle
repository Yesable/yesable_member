buildscript {
    ext {
        // 플러그인 버전
        queryDslVersion = "5.0.0"
        grpcVersion = '1.65.1'
        protobufPluginVersion = '0.8.18'
        protocVersion = '3.21.4'
        mapstructVersion='1.5.3.Final'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" } // 플러그인 저장소
}

dependencies {

    // spring boot starter
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    /*
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'


    */

    // GRPC
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-core:${grpcVersion}"

    implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE'


    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mariadb.jdbc:mariadb-java-client:2.4.0"
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client"


    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'



    // QueryDSL
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    // mapper
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor"no.entur.mapstruct.spi:protobuf-spi-impl:1.45"



    //eureka
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'


    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor" //config
    implementation "javax.annotation:javax.annotation-api:1.3.2"





}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.3"
    }
}
def generatedFilesBaseDir = "${projectDir}/src/generated"

test {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 * QueryDSL Build Options
 */
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

/**
 * Proto Build Options
 */
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc{}
        }
    }
    generatedFilesBaseDir = "${generatedFilesBaseDir}"
}

sourceSets {
    main {
        java {
          //  srcDirs "${generatedFilesBaseDir}/main/grpc/com/example/grpc"
            srcDirs "${projectDir}/build/generated/source/proto/main/grpc"
            //srcDirs "${generatedFilesBaseDir}/main/java"
            srcDirs "${projectDir}/build/generated/source/proto/main/java"

        }
    }
    /*
    test {
        //여기도 srcDirs 설정해야 test에도 동작
    }*/
}
